package Gui;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.util.Random;

import Exceptions.LowFPS;
import GameObjects.BasicEnemy;
import GameObjects.ID;
import GameObjects.Player;
import Handler.Handler;
import Handler.Spawn;
import Inputs.KeyHandler;

public class Game extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;

	public static final int WIDTH = 1080, HEIGHT = WIDTH / 12 * 9;
	public static int FPS;

	private Thread thread;
	private boolean running = true;

	public static boolean paused = false;
	public static boolean lowFPS = false;

	private Random r;
	private Handler handler;
	private HUD hud;
	private Spawn spawner;
	private Menu menu;
	private LowFPS lfps;

	public enum STATE {
		MENU, GAME, HELP, END;
	};

	public STATE gameState = STATE.MENU;

	public Game() {

		handler = new Handler();
		menu = new Menu(this, handler);
		this.addKeyListener(new KeyHandler());
		this.addMouseListener(menu);

		new Window(WIDTH, HEIGHT, "Wave", this);

		hud = new HUD();
		spawner = new Spawn(handler, hud);
		lfps = new LowFPS();
		r = new Random();

		if (gameState == STATE.GAME) {
			handler.addObject(new Player(WIDTH / 2 - 32, HEIGHT / 2 - 32, 32, 32, ID.Player, handler));
			handler.addObject(new BasicEnemy(r.nextInt(Game.WIDTH - 128), r.nextInt(Game.HEIGHT - 128), 16, 16,
					ID.BasicEnemy, handler));
		} else {
			for (int i = 0; i < 60; i++) {
				handler.addObject(new MenuParticle(r.nextInt(WIDTH) - 128, r.nextInt(HEIGHT) - 128, 16, 16,
						ID.MenuParticle, handler));
			}
		}

	}

	public void start() {
		thread = new Thread(this);
		thread.start();
		running = true;
	}

	public void stop() {
		try {
			thread.join();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void run() {
		this.requestFocus();
		long lastTime = System.nanoTime();
		double ammountOfTicks = 60.0;
		double ns = 1000000000 / ammountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int frames = 0;
		while (running) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while (delta >= 1) {
				tick();
				delta--;
			}
			if (running)
				render();
			frames++;

			if (System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				FPS = frames;
				frames = 0;
				if (frames < 30) {
					lowFPS = true;
				} else {
					lowFPS = false;
				}
			}
		}
		stop();
	}

	private void tick() {
		handler.tick();
		if (gameState == STATE.GAME) {
			hud.tick();
			spawner.tick();
		} else if (gameState == STATE.MENU) {
			menu.tick();
		}

	}

	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}

		Graphics g = bs.getDrawGraphics();

		g.setColor(Color.black);
		g.fillRect(0, 0, WIDTH, HEIGHT);

		lfps.render(g);

		try {
			handler.render(g);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (gameState == STATE.GAME) {
			hud.render(g);
		} else if (gameState == STATE.MENU || gameState == STATE.HELP) {
			menu.render(g);
		}

		g.dispose();
		bs.show();
	}

	public static float clamp(float var, float min, float max) {
		if (var >= max) {
			return var = max;
		} else if (var <= min) {
			return var = min;
		} else
			return var;

	}

}
